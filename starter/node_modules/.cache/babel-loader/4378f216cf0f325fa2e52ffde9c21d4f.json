{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mokhl\\\\react-udacity\\\\nd0191-c1-myreads\\\\starter\\\\src\\\\components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Book from './Book';\nimport * as BooksAPI from './utils/BooksAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = ({\n  books,\n  changeShelf\n}) => {\n  _s();\n\n  const [queryValue, setQueryValue] = useState('');\n  const [resbooks, setResBooks] = useState('');\n\n  const updateQueryValue = queryValue => {\n    setQueryValue(queryValue);\n  };\n\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      const fetch = async () => {\n        const res = await BooksAPI.search(String(queryValue));\n        res.error !== 'empty query' ? compareResWithShelfBooks(res, books) : setResBooks();\n      };\n\n      console.log(queryValue);\n      queryValue !== '' ? fetch() : setResBooks();\n    }, 500);\n    return () => clearTimeout(timeOut);\n  }, [books, queryValue]);\n\n  const compareResWithShelfBooks = (resBooks, shelfBooks) => {\n    const bookUpdates = Object.fromEntries(shelfBooks.map(temp => [temp.id, temp]));\n    const updatedBooks = resBooks.map(temp => bookUpdates[temp.id] || temp);\n    setResBooks(updatedBooks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"book-data\",\n          placeholder: \"Search by title, author, or ISBN\",\n          value: queryValue,\n          onChange: event => updateQueryValue(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"books-grid\",\n      children: resbooks ? resbooks.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Book, {\n          bookData: book,\n          changeShelf: changeShelf\n        }, book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Books found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"a82LFSwOWpzIC7BOiwEAvvn0564=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/mokhl/react-udacity/nd0191-c1-myreads/starter/src/components/Search.js"],"names":["React","Link","useState","useEffect","Book","BooksAPI","Search","books","changeShelf","queryValue","setQueryValue","resbooks","setResBooks","updateQueryValue","timeOut","setTimeout","fetch","res","search","String","error","compareResWithShelfBooks","console","log","clearTimeout","resBooks","shelfBooks","bookUpdates","Object","fromEntries","map","temp","id","updatedBooks","event","target","value","book"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport Book from './Book';\r\nimport * as BooksAPI from './utils/BooksAPI';\r\n\r\nconst Search = ({ books, changeShelf }) => {\r\n  const [queryValue, setQueryValue] = useState('');\r\n  const [resbooks, setResBooks] = useState('');\r\n\r\n  const updateQueryValue = (queryValue) => {\r\n    setQueryValue(queryValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timeOut = setTimeout(() => {\r\n      const fetch = async () => {\r\n        const res = await BooksAPI.search(String(queryValue));\r\n        res.error !== 'empty query'\r\n          ? compareResWithShelfBooks(res, books)\r\n          : setResBooks();\r\n      };\r\n      console.log(queryValue);\r\n      queryValue !== '' ? fetch() : setResBooks();\r\n    }, 500);\r\n    return () => clearTimeout(timeOut);\r\n  }, [books, queryValue]);\r\n\r\n  const compareResWithShelfBooks = (resBooks, shelfBooks) => {\r\n    const bookUpdates = Object.fromEntries(\r\n      shelfBooks.map((temp) => [temp.id, temp])\r\n    );\r\n    const updatedBooks = resBooks.map((temp) => bookUpdates[temp.id] || temp);\r\n    setResBooks(updatedBooks);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-books\">\r\n      <div className=\"search-books-bar\">\r\n        <Link className=\"close-search\" to=\"/\">\r\n          Close\r\n        </Link>\r\n        <div className=\"search-books-input-wrapper\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"book-data\"\r\n            placeholder=\"Search by title, author, or ISBN\"\r\n            value={queryValue}\r\n            onChange={(event) => updateQueryValue(event.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"search-books-results\">\r\n        <ol className=\"books-grid\"></ol>\r\n      </div>\r\n      <ol className=\"books-grid\">\r\n        {resbooks ? (\r\n          resbooks.map((book) => (\r\n            <li key={book.id}>\r\n              <Book\r\n                key={book.id}\r\n                bookData={book}\r\n                changeShelf={changeShelf}\r\n              ></Book>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <div>\r\n            <p>No Books found</p>\r\n          </div>\r\n        )}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}